//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BaseDeDatosTarea
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ToolBorrowingEntities : DbContext
    {
        public ToolBorrowingEntities()
            : base("name=ToolBorrowingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<History> Histories { get; set; }
        public virtual DbSet<Loan> Loans { get; set; }
        public virtual DbSet<Tool> Tools { get; set; }
    
        public virtual int GetActiveLoans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetActiveLoans");
        }
    
        public virtual int InsertLoan(Nullable<int> userId, Nullable<int> toolId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var toolIdParameter = toolId.HasValue ?
                new ObjectParameter("ToolId", toolId) :
                new ObjectParameter("ToolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLoan", userIdParameter, toolIdParameter);
        }
    
        public virtual int InsertTool(string name, string description, Nullable<int> quantity)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTool", nameParameter, descriptionParameter, quantityParameter);
        }
    
        public virtual int ReturnLoan(Nullable<int> loanId)
        {
            var loanIdParameter = loanId.HasValue ?
                new ObjectParameter("LoanId", loanId) :
                new ObjectParameter("LoanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnLoan", loanIdParameter);
        }
    }
}
